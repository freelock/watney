"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2017 Vector Creations Ltd

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


var _q = require("q");

var _q2 = _interopRequireDefault(_q);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Internal module. indexeddb storage for e2e.
 *
 * @module
 */

var VERSION = 1;

/**
 * @implements {module:crypto/store/base~CryptoStore}
 */

var IndexedDBCryptoStore = function () {
    /**
     * Create a new IndexedDBCryptoStore
     *
     * @param {IDBFactory} indexedDB  global indexedDB instance
     * @param {string} dbName   name of db to connect to
     */
    function IndexedDBCryptoStore(indexedDB, dbName) {
        _classCallCheck(this, IndexedDBCryptoStore);

        if (!indexedDB) {
            throw new Error("must pass indexedDB into IndexedDBCryptoStore");
        }
        this._indexedDB = indexedDB;
        this._dbName = dbName;
        this._dbPromise = null;
    }

    /**
     * Ensure the database exists and is up-to-date
     *
     * @return {Promise} resolves to an instance of IDBDatabase when
     * the database is ready
     */


    _createClass(IndexedDBCryptoStore, [{
        key: "connect",
        value: function connect() {
            var _this = this;

            if (this._dbPromise) {
                return this._dbPromise;
            }

            this._dbPromise = new _q2.default.Promise(function (resolve, reject) {
                console.log("connecting to indexeddb " + _this._dbName);
                var req = _this._indexedDB.open(_this._dbName, VERSION);

                req.onupgradeneeded = function (ev) {
                    var db = ev.target.result;
                    var oldVersion = ev.oldVersion;
                    console.log("Upgrading IndexedDBCryptoStore from version " + oldVersion + (" to " + VERSION));
                    if (oldVersion < 1) {
                        // The database did not previously exist.
                        createDatabase(db);
                    }
                    // Expand as needed.
                };

                req.onblocked = function () {
                    console.log("can't yet open IndexedDBCryptoStore because it is open elsewhere");
                };

                req.onerror = function (ev) {
                    reject(new Error("unable to connect to indexeddb: " + ev.target.error));
                };

                req.onsuccess = function (r) {
                    var db = r.target.result;

                    // make sure we close the db on `onversionchange` - otherwise
                    // attempts to delete the database will block (and subsequent
                    // attempts to re-create it will also block).
                    db.onversionchange = function (ev) {
                        db.close();
                    };

                    resolve(db);
                };
            });
            return this._dbPromise;
        }

        /**
         * Delete all data from this store.
         *
         * @returns {Promise} resolves when the store has been cleared.
         */

    }, {
        key: "deleteAllData",
        value: function deleteAllData() {
            var _this2 = this;

            return new _q2.default.Promise(function (resolve, reject) {
                console.log("Removing indexeddb instance: " + _this2._dbName);
                var req = _this2._indexedDB.deleteDatabase(_this2._dbName);

                req.onblocked = function () {
                    console.log("can't yet delete IndexedDBCryptoStore because it is open elsewhere");
                };

                req.onerror = function (ev) {
                    // in firefox, with indexedDB disabled, this fails with a
                    // DOMError. We treat this as non-fatal, so that people can
                    // still use the app.
                    console.warn("unable to delete IndexedDBCryptoStore: " + ev.target.error);
                    resolve();
                };

                req.onsuccess = function () {
                    console.log("Removed indexeddb instance: " + _this2._dbName);
                    resolve();
                };
            });
        }
    }]);

    return IndexedDBCryptoStore;
}();

exports.default = IndexedDBCryptoStore;


function createDatabase(db) {
    var outgoingRoomKeyRequestsStore = db.createObjectStore("outgoingRoomKeyRequests", { keyPath: "requestId" });

    // we assume that the RoomKeyRequestBody will have room_id and session_id
    // properties, to make the index efficient.
    outgoingRoomKeyRequestsStore.createIndex("session", ["requestBody.room_id", "requestBody.session_id"]);

    outgoingRoomKeyRequestsStore.createIndex("state", "state");
}
//# sourceMappingURL=indexeddb-crypto-store.js.map