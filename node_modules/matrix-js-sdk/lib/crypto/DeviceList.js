/*
Copyright 2017 Vector Creations Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
"use strict";

/**
 * @module crypto/DeviceList
 *
 * Manages the list of other users' devices
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var _deviceinfo = require('./deviceinfo');

var _deviceinfo2 = _interopRequireDefault(_deviceinfo);

var _olmlib = require('./olmlib');

var _olmlib2 = _interopRequireDefault(_olmlib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// constants for DeviceList._deviceTrackingStatus
// const TRACKING_STATUS_NOT_TRACKED = 0;
var TRACKING_STATUS_PENDING_DOWNLOAD = 1;
var TRACKING_STATUS_DOWNLOAD_IN_PROGRESS = 2;
var TRACKING_STATUS_UP_TO_DATE = 3;

/**
 * @alias module:crypto/DeviceList
 */

var DeviceList = function () {
    function DeviceList(baseApis, sessionStore, olmDevice) {
        _classCallCheck(this, DeviceList);

        this._sessionStore = sessionStore;
        this._serialiser = new DeviceListUpdateSerialiser(baseApis, sessionStore, olmDevice);

        // which users we are tracking device status for.
        // userId -> TRACKING_STATUS_*
        this._deviceTrackingStatus = sessionStore.getEndToEndDeviceTrackingStatus() || {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = Object.keys(this._deviceTrackingStatus)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var u = _step.value;

                // if a download was in progress when we got shut down, it isn't any more.
                if (this._deviceTrackingStatus[u] == TRACKING_STATUS_DOWNLOAD_IN_PROGRESS) {
                    this._deviceTrackingStatus[u] = TRACKING_STATUS_PENDING_DOWNLOAD;
                }
            }

            // userId -> promise
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        this._keyDownloadsInProgressByUser = {};

        this.lastKnownSyncToken = null;
    }

    /**
     * Download the keys for a list of users and stores the keys in the session
     * store.
     * @param {Array} userIds The users to fetch.
     * @param {bool} forceDownload Always download the keys even if cached.
     *
     * @return {Promise} A promise which resolves to a map userId->deviceId->{@link
     * module:crypto/deviceinfo|DeviceInfo}.
     */


    _createClass(DeviceList, [{
        key: 'downloadKeys',
        value: function downloadKeys(userIds, forceDownload) {
            var _this = this;

            var usersToDownload = [];
            var promises = [];

            userIds.forEach(function (u) {
                var trackingStatus = _this._deviceTrackingStatus[u];
                if (_this._keyDownloadsInProgressByUser[u]) {
                    // already a key download in progress/queued for this user; its results
                    // will be good enough for us.
                    console.log('downloadKeys: already have a download in progress for ' + (u + ': awaiting its result'));
                    promises.push(_this._keyDownloadsInProgressByUser[u]);
                } else if (forceDownload || trackingStatus != TRACKING_STATUS_UP_TO_DATE) {
                    usersToDownload.push(u);
                }
            });

            if (usersToDownload.length != 0) {
                console.log("downloadKeys: downloading for", usersToDownload);
                var downloadPromise = this._doKeyDownload(usersToDownload);
                promises.push(downloadPromise);
            }

            if (promises.length === 0) {
                console.log("downloadKeys: already have all necessary keys");
            }

            return _q2.default.all(promises).then(function () {
                return _this._getDevicesFromStore(userIds);
            });
        }

        /**
         * Get the stored device keys for a list of user ids
         *
         * @param {string[]} userIds the list of users to list keys for.
         *
         * @return {Object} userId->deviceId->{@link module:crypto/deviceinfo|DeviceInfo}.
         */

    }, {
        key: '_getDevicesFromStore',
        value: function _getDevicesFromStore(userIds) {
            var stored = {};
            var self = this;
            userIds.map(function (u) {
                stored[u] = {};
                var devices = self.getStoredDevicesForUser(u) || [];
                devices.map(function (dev) {
                    stored[u][dev.deviceId] = dev;
                });
            });
            return stored;
        }

        /**
         * Get the stored device keys for a user id
         *
         * @param {string} userId the user to list keys for.
         *
         * @return {module:crypto/deviceinfo[]|null} list of devices, or null if we haven't
         * managed to get a list of devices for this user yet.
         */

    }, {
        key: 'getStoredDevicesForUser',
        value: function getStoredDevicesForUser(userId) {
            var devs = this._sessionStore.getEndToEndDevicesForUser(userId);
            if (!devs) {
                return null;
            }
            var res = [];
            for (var deviceId in devs) {
                if (devs.hasOwnProperty(deviceId)) {
                    res.push(_deviceinfo2.default.fromStorage(devs[deviceId], deviceId));
                }
            }
            return res;
        }

        /**
         * Get the stored keys for a single device
         *
         * @param {string} userId
         * @param {string} deviceId
         *
         * @return {module:crypto/deviceinfo?} device, or undefined
         * if we don't know about this device
         */

    }, {
        key: 'getStoredDevice',
        value: function getStoredDevice(userId, deviceId) {
            var devs = this._sessionStore.getEndToEndDevicesForUser(userId);
            if (!devs || !devs[deviceId]) {
                return undefined;
            }
            return _deviceinfo2.default.fromStorage(devs[deviceId], deviceId);
        }

        /**
         * Find a device by curve25519 identity key
         *
         * @param {string} userId     owner of the device
         * @param {string} algorithm  encryption algorithm
         * @param {string} senderKey  curve25519 key to match
         *
         * @return {module:crypto/deviceinfo?}
         */

    }, {
        key: 'getDeviceByIdentityKey',
        value: function getDeviceByIdentityKey(userId, algorithm, senderKey) {
            if (algorithm !== _olmlib2.default.OLM_ALGORITHM && algorithm !== _olmlib2.default.MEGOLM_ALGORITHM) {
                // we only deal in olm keys
                return null;
            }

            var devices = this._sessionStore.getEndToEndDevicesForUser(userId);
            if (!devices) {
                return null;
            }

            for (var deviceId in devices) {
                if (!devices.hasOwnProperty(deviceId)) {
                    continue;
                }

                var device = devices[deviceId];
                for (var keyId in device.keys) {
                    if (!device.keys.hasOwnProperty(keyId)) {
                        continue;
                    }
                    if (keyId.indexOf("curve25519:") !== 0) {
                        continue;
                    }
                    var deviceKey = device.keys[keyId];
                    if (deviceKey == senderKey) {
                        return _deviceinfo2.default.fromStorage(device, deviceId);
                    }
                }
            }

            // doesn't match a known device
            return null;
        }

        /**
         * flag the given user for device-list tracking, if they are not already.
         *
         * This will mean that a subsequent call to refreshOutdatedDeviceLists()
         * will download the device list for the user, and that subsequent calls to
         * invalidateUserDeviceList will trigger more updates.
         *
         * @param {String} userId
         */

    }, {
        key: 'startTrackingDeviceList',
        value: function startTrackingDeviceList(userId) {
            // sanity-check the userId. This is mostly paranoia, but if synapse
            // can't parse the userId we give it as an mxid, it 500s the whole
            // request and we can never update the device lists again (because
            // the broken userId is always 'invalid' and always included in any
            // refresh request).
            // By checking it is at least a string, we can eliminate a class of
            // silly errors.
            if (typeof userId !== 'string') {
                throw new Error('userId must be a string; was ' + userId);
            }
            if (!this._deviceTrackingStatus[userId]) {
                console.log('Now tracking device list for ' + userId);
                this._deviceTrackingStatus[userId] = TRACKING_STATUS_PENDING_DOWNLOAD;
            }
            // we don't yet persist the tracking status, since there may be a lot
            // of calls; instead we wait for the forthcoming
            // refreshOutdatedDeviceLists.
        }

        /**
         * Mark the cached device list for the given user outdated.
         *
         * If we are not tracking this user's devices, we'll do nothing. Otherwise
         * we flag the user as needing an update.
         *
         * This doesn't actually set off an update, so that several users can be
         * batched together. Call refreshOutdatedDeviceLists() for that.
         *
         * @param {String} userId
         */

    }, {
        key: 'invalidateUserDeviceList',
        value: function invalidateUserDeviceList(userId) {
            if (this._deviceTrackingStatus[userId]) {
                console.log("Marking device list outdated for", userId);
                this._deviceTrackingStatus[userId] = TRACKING_STATUS_PENDING_DOWNLOAD;
            }
            // we don't yet persist the tracking status, since there may be a lot
            // of calls; instead we wait for the forthcoming
            // refreshOutdatedDeviceLists.
        }

        /**
         * Mark all tracked device lists as outdated.
         *
         * This will flag each user whose devices we are tracking as in need of an
         * update.
         */

    }, {
        key: 'invalidateAllDeviceLists',
        value: function invalidateAllDeviceLists() {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = Object.keys(this._deviceTrackingStatus)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var userId = _step2.value;

                    this.invalidateUserDeviceList(userId);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }

        /**
         * If we have users who have outdated device lists, start key downloads for them
         *
         * @returns {Promise} which completes when the download completes; normally there
         *    is no need to wait for this (it's mostly for the unit tests).
         */

    }, {
        key: 'refreshOutdatedDeviceLists',
        value: function refreshOutdatedDeviceLists() {
            var usersToDownload = [];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = Object.keys(this._deviceTrackingStatus)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var userId = _step3.value;

                    var stat = this._deviceTrackingStatus[userId];
                    if (stat == TRACKING_STATUS_PENDING_DOWNLOAD) {
                        usersToDownload.push(userId);
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            if (usersToDownload.length == 0) {
                return;
            }

            // we didn't persist the tracking status during
            // invalidateUserDeviceList, so do it now.
            this._persistDeviceTrackingStatus();

            return this._doKeyDownload(usersToDownload);
        }

        /**
         * Fire off download update requests for the given users, and update the
         * device list tracking status for them, and the
         * _keyDownloadsInProgressByUser map for them.
         *
         * @param {String[]} users  list of userIds
         *
         * @return {module:client.Promise} resolves when all the users listed have
         *     been updated. rejects if there was a problem updating any of the
         *     users.
         */

    }, {
        key: '_doKeyDownload',
        value: function _doKeyDownload(users) {
            var _this2 = this;

            if (users.length === 0) {
                // nothing to do
                return (0, _q2.default)();
            }

            var prom = this._serialiser.updateDevicesForUsers(users, this.lastKnownSyncToken).then(function () {
                finished(true);
            }, function (e) {
                console.error('Error downloading keys for ' + users + ":", e);
                finished(false);
                throw e;
            });

            users.forEach(function (u) {
                _this2._keyDownloadsInProgressByUser[u] = prom;
                var stat = _this2._deviceTrackingStatus[u];
                if (stat == TRACKING_STATUS_PENDING_DOWNLOAD) {
                    _this2._deviceTrackingStatus[u] = TRACKING_STATUS_DOWNLOAD_IN_PROGRESS;
                }
            });

            var finished = function finished(success) {
                users.forEach(function (u) {
                    // we may have queued up another download request for this user
                    // since we started this request. If that happens, we should
                    // ignore the completion of the first one.
                    if (_this2._keyDownloadsInProgressByUser[u] !== prom) {
                        console.log('Another update in the queue for', u, '- not marking up-to-date');
                        return;
                    }
                    delete _this2._keyDownloadsInProgressByUser[u];
                    var stat = _this2._deviceTrackingStatus[u];
                    if (stat == TRACKING_STATUS_DOWNLOAD_IN_PROGRESS) {
                        if (success) {
                            // we didn't get any new invalidations since this download started:
                            // this user's device list is now up to date.
                            _this2._deviceTrackingStatus[u] = TRACKING_STATUS_UP_TO_DATE;
                            console.log("Device list for", u, "now up to date");
                        } else {
                            _this2._deviceTrackingStatus[u] = TRACKING_STATUS_PENDING_DOWNLOAD;
                        }
                    }
                });
                _this2._persistDeviceTrackingStatus();
            };

            return prom;
        }
    }, {
        key: '_persistDeviceTrackingStatus',
        value: function _persistDeviceTrackingStatus() {
            this._sessionStore.storeEndToEndDeviceTrackingStatus(this._deviceTrackingStatus);
        }
    }]);

    return DeviceList;
}();

/**
 * Serialises updates to device lists
 *
 * Ensures that results from /keys/query are not overwritten if a second call
 * completes *before* an earlier one.
 *
 * It currently does this by ensuring only one call to /keys/query happens at a
 * time (and queuing other requests up).
 */


exports.default = DeviceList;

var DeviceListUpdateSerialiser = function () {
    function DeviceListUpdateSerialiser(baseApis, sessionStore, olmDevice) {
        _classCallCheck(this, DeviceListUpdateSerialiser);

        this._baseApis = baseApis;
        this._sessionStore = sessionStore;
        this._olmDevice = olmDevice;

        this._downloadInProgress = false;

        // users which are queued for download
        // userId -> true
        this._keyDownloadsQueuedByUser = {};

        // deferred which is resolved when the queued users are downloaded.
        //
        // non-null indicates that we have users queued for download.
        this._queuedQueryDeferred = null;

        // sync token to be used for the next query: essentially the
        // most recent one we know about
        this._nextSyncToken = null;
    }

    /**
     * Make a key query request for the given users
     *
     * @param {String[]} users list of user ids
     *
     * @param {String} syncToken sync token to pass in the query request, to
     *     help the HS give the most recent results
     *
     * @return {module:client.Promise} resolves when all the users listed have
     *     been updated. rejects if there was a problem updating any of the
     *     users.
     */


    _createClass(DeviceListUpdateSerialiser, [{
        key: 'updateDevicesForUsers',
        value: function updateDevicesForUsers(users, syncToken) {
            var _this3 = this;

            users.forEach(function (u) {
                _this3._keyDownloadsQueuedByUser[u] = true;
            });
            this._nextSyncToken = syncToken;

            if (!this._queuedQueryDeferred) {
                this._queuedQueryDeferred = _q2.default.defer();
            }

            if (this._downloadInProgress) {
                // just queue up these users
                console.log('Queued key download for', users);
                return this._queuedQueryDeferred.promise;
            }

            // start a new download.
            return this._doQueuedQueries();
        }
    }, {
        key: '_doQueuedQueries',
        value: function _doQueuedQueries() {
            var _this4 = this;

            if (this._downloadInProgress) {
                throw new Error("DeviceListUpdateSerialiser._doQueuedQueries called with request active");
            }

            var downloadUsers = Object.keys(this._keyDownloadsQueuedByUser);
            this._keyDownloadsQueuedByUser = {};
            var deferred = this._queuedQueryDeferred;
            this._queuedQueryDeferred = null;

            console.log('Starting key download for', downloadUsers);
            this._downloadInProgress = true;

            var opts = {};
            if (this._nextSyncToken) {
                opts.token = this._nextSyncToken;
            }

            this._baseApis.downloadKeysForUsers(downloadUsers, opts).then(function (res) {
                var dk = res.device_keys || {};

                // do each user in a separate promise, to avoid wedging the CPU
                // (https://github.com/vector-im/riot-web/issues/3158)
                //
                // of course we ought to do this in a web worker or similar, but
                // this serves as an easy solution for now.
                var prom = (0, _q2.default)();
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    var _loop = function _loop() {
                        var userId = _step4.value;

                        prom = prom.delay(5).then(function () {
                            _this4._processQueryResponseForUser(userId, dk[userId]);
                        });
                    };

                    for (var _iterator4 = downloadUsers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        _loop();
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4.return) {
                            _iterator4.return();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }

                return prom;
            }).done(function () {
                console.log('Completed key download for ' + downloadUsers);

                _this4._downloadInProgress = false;
                deferred.resolve();

                // if we have queued users, fire off another request.
                if (_this4._queuedQueryDeferred) {
                    _this4._doQueuedQueries();
                }
            }, function (e) {
                console.warn('Error downloading keys for ' + downloadUsers + ':', e);
                _this4._downloadInProgressInProgress = false;
                deferred.reject(e);
            });

            return deferred.promise;
        }
    }, {
        key: '_processQueryResponseForUser',
        value: function _processQueryResponseForUser(userId, response) {
            console.log('got keys for ' + userId + ':', response);

            // map from deviceid -> deviceinfo for this user
            var userStore = {};
            var devs = this._sessionStore.getEndToEndDevicesForUser(userId);
            if (devs) {
                Object.keys(devs).forEach(function (deviceId) {
                    var d = _deviceinfo2.default.fromStorage(devs[deviceId], deviceId);
                    userStore[deviceId] = d;
                });
            }

            _updateStoredDeviceKeysForUser(this._olmDevice, userId, userStore, response || {});

            // update the session store
            var storage = {};
            Object.keys(userStore).forEach(function (deviceId) {
                storage[deviceId] = userStore[deviceId].toStorage();
            });

            this._sessionStore.storeEndToEndDevicesForUser(userId, storage);
        }
    }]);

    return DeviceListUpdateSerialiser;
}();

function _updateStoredDeviceKeysForUser(_olmDevice, userId, userStore, userResult) {
    var updated = false;

    // remove any devices in the store which aren't in the response
    for (var deviceId in userStore) {
        if (!userStore.hasOwnProperty(deviceId)) {
            continue;
        }

        if (!(deviceId in userResult)) {
            console.log("Device " + userId + ":" + deviceId + " has been removed");
            delete userStore[deviceId];
            updated = true;
        }
    }

    for (var _deviceId in userResult) {
        if (!userResult.hasOwnProperty(_deviceId)) {
            continue;
        }

        var deviceResult = userResult[_deviceId];

        // check that the user_id and device_id in the response object are
        // correct
        if (deviceResult.user_id !== userId) {
            console.warn("Mismatched user_id " + deviceResult.user_id + " in keys from " + userId + ":" + _deviceId);
            continue;
        }
        if (deviceResult.device_id !== _deviceId) {
            console.warn("Mismatched device_id " + deviceResult.device_id + " in keys from " + userId + ":" + _deviceId);
            continue;
        }

        if (_storeDeviceKeys(_olmDevice, userStore, deviceResult)) {
            updated = true;
        }
    }

    return updated;
}

/*
 * Process a device in a /query response, and add it to the userStore
 *
 * returns true if a change was made, else false
 */
function _storeDeviceKeys(_olmDevice, userStore, deviceResult) {
    if (!deviceResult.keys) {
        // no keys?
        return false;
    }

    var deviceId = deviceResult.device_id;
    var userId = deviceResult.user_id;

    var signKeyId = "ed25519:" + deviceId;
    var signKey = deviceResult.keys[signKeyId];
    if (!signKey) {
        console.warn("Device " + userId + ":" + deviceId + " has no ed25519 key");
        return false;
    }

    var unsigned = deviceResult.unsigned || {};

    try {
        _olmlib2.default.verifySignature(_olmDevice, deviceResult, userId, deviceId, signKey);
    } catch (e) {
        console.warn("Unable to verify signature on device " + userId + ":" + deviceId + ":" + e);
        return false;
    }

    // DeviceInfo
    var deviceStore = void 0;

    if (deviceId in userStore) {
        // already have this device.
        deviceStore = userStore[deviceId];

        if (deviceStore.getFingerprint() != signKey) {
            // this should only happen if the list has been MITMed; we are
            // best off sticking with the original keys.
            //
            // Should we warn the user about it somehow?
            console.warn("Ed25519 key for device " + userId + ":" + deviceId + " has changed");
            return false;
        }
    } else {
        userStore[deviceId] = deviceStore = new _deviceinfo2.default(deviceId);
    }

    deviceStore.keys = deviceResult.keys || {};
    deviceStore.algorithms = deviceResult.algorithms || [];
    deviceStore.unsigned = unsigned;
    return true;
}
//# sourceMappingURL=DeviceList.js.map