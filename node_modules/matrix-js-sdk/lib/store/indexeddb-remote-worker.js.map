{"version":3,"sources":["../../src/store/indexeddb-remote-worker.js"],"names":["IndexedDbStoreWorker","postMessage","backend","onMessage","bind","ev","msg","data","prom","command","indexedDB","args","connect","init","clearDatabase","then","result","getSavedSync","setSyncData","syncToDatabase","getUserPresenceEvents","undefined","seq","error","done","ret","call","err","module","exports"],"mappings":";;qjBAAA;;;;;;;;;;;;;;;;AAgBA;;;;AACA;;;;;;;;;;AAEA;;;;IAIMA,oB;AACF,kCAAYC,WAAZ,EAAyB;AAAA;;AACrB,aAAKC,OAAL,GAAe,IAAf;AACA,aAAKD,WAAL,GAAmBA,WAAnB;;AAEA,aAAKE,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACH;;;;kCAESC,E,EAAI;AAAA;AAAA;AAAA;;AACV,gBAAMC,MAAMD,GAAGE,IAAf;AACA,gBAAIC,aAAJ;;AAEA,oBAAQF,IAAIG,OAAZ;AACI,qBAAK,cAAL;AACI,yBAAKP,OAAL,GAAe;AACX;AACA;AACAQ,6BAHW,EAGAJ,IAAIK,IAAJ,CAAS,CAAT,CAHA,CAAf;AAKAH,2BAAO,kBAAP;AACA;AACJ,qBAAK,SAAL;AACIA,2BAAO,KAAKN,OAAL,CAAaU,OAAb,EAAP;AACA;AACJ,qBAAK,MAAL;AACIJ,2BAAO,KAAKN,OAAL,CAAaW,IAAb,EAAP;AACA;AACJ,qBAAK,eAAL;AACIL,2BAAO,KAAKN,OAAL,CAAaY,aAAb,GAA6BC,IAA7B,CAAkC,UAACC,MAAD,EAAY;AACjD;AACA;AACA,+BAAO,EAAP;AACH,qBAJM,CAAP;AAKA;AACJ,qBAAK,cAAL;AACIR,2BAAO,KAAKN,OAAL,CAAae,YAAb,CAA0B,KAA1B,CAAP;AACA;AACJ,qBAAK,aAAL;AACIT,2BAAO,iBAAKN,OAAL,EAAagB,WAAb,oCAA4BZ,IAAIK,IAAhC,EAAP;AACA;AACJ,qBAAK,gBAAL;AACIH,2BAAO,kBAAKN,OAAL,EAAaiB,cAAb,qCAA+Bb,IAAIK,IAAnC,GAAyCI,IAAzC,CAA8C,YAAM;AACvD;AACA,+BAAO,EAAP;AACH,qBAHM,CAAP;AAIA;AACJ,qBAAK,uBAAL;AACIP,2BAAO,KAAKN,OAAL,CAAakB,qBAAb,EAAP;AACA;AApCR;;AAuCA,gBAAIZ,SAASa,SAAb,EAAwB;AACpBpB,4BAAY;AACRQ,6BAAS,UADD;AAERa,yBAAKhB,IAAIgB,GAFD;AAGR;AACAC,2BAAO;AAJC,iBAAZ;AAMA;AACH;;AAEDf,iBAAKgB,IAAL,CAAU,UAACC,GAAD,EAAS;AACf,sBAAKxB,WAAL,CAAiByB,IAAjB,CAAsB,IAAtB,EAA4B;AACxBjB,6BAAS,aADe;AAExBa,yBAAKhB,IAAIgB,GAFe;AAGxBN,4BAAQS;AAHgB,iBAA5B;AAKH,aAND,EAMG,UAACE,GAAD,EAAS;AACR,sBAAK1B,WAAL,CAAiByB,IAAjB,CAAsB,IAAtB,EAA4B;AACxBjB,6BAAS,UADe;AAExBa,yBAAKhB,IAAIgB,GAFe;AAGxBC,2BAAOI;AAHiB,iBAA5B;AAKH,aAZD;AAaH;;;;;;AAGLC,OAAOC,OAAP,GAAiB7B,oBAAjB","file":"indexeddb-remote-worker.js","sourcesContent":["/*\nCopyright 2017 Vector Creations Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport q from \"q\";\nimport LocalIndexedDBStoreBackend from \"./indexeddb-local-backend.js\";\n\n/**\n * This class lives in the webworker and drives a LocalIndexedDbStoreBackend\n * controlled by messages from the main process.\n */\nclass IndexedDbStoreWorker {\n    constructor(postMessage) {\n        this.backend = null;\n        this.postMessage = postMessage;\n\n        this.onMessage = this.onMessage.bind(this);\n    }\n\n    onMessage(ev) {\n        const msg = ev.data;\n        let prom;\n\n        switch (msg.command) {\n            case '_setupWorker':\n                this.backend = new LocalIndexedDBStoreBackend(\n                    // this is the 'indexedDB' global (where global != window\n                    // because it's a web worker and there is no window).\n                    indexedDB, msg.args[0],\n                );\n                prom = q();\n                break;\n            case 'connect':\n                prom = this.backend.connect();\n                break;\n            case 'init':\n                prom = this.backend.init();\n                break;\n            case 'clearDatabase':\n                prom = this.backend.clearDatabase().then((result) => {\n                    // This returns special classes which can't be cloned\n                    // accross to the main script, so don't try.\n                    return {};\n                });\n                break;\n            case 'getSavedSync':\n                prom = this.backend.getSavedSync(false);\n                break;\n            case 'setSyncData':\n                prom = this.backend.setSyncData(...msg.args);\n                break;\n            case 'syncToDatabase':\n                prom = this.backend.syncToDatabase(...msg.args).then(() => {\n                    // This also returns IndexedDB events which are not cloneable\n                    return {};\n                });\n                break;\n            case 'getUserPresenceEvents':\n                prom = this.backend.getUserPresenceEvents();\n                break;\n        }\n\n        if (prom === undefined) {\n            postMessage({\n                command: 'cmd_fail',\n                seq: msg.seq,\n                // Canb't be an Error because they're not structured cloneable\n                error: \"Unrecognised command\",\n            });\n            return;\n        }\n\n        prom.done((ret) => {\n            this.postMessage.call(null, {\n                command: 'cmd_success',\n                seq: msg.seq,\n                result: ret,\n            });\n        }, (err) => {\n            this.postMessage.call(null, {\n                command: 'cmd_fail',\n                seq: msg.seq,\n                error: err,\n            });\n        });\n    }\n}\n\nmodule.exports = IndexedDbStoreWorker;\n"]}