diff --git a/lib/client.js b/lib/client.js
index a8aefd5..f23fb4a 100644
--- a/lib/client.js
+++ b/lib/client.js
@@ -2010,8 +2010,10 @@ function doInitialSync(client, historyLen, includeArchived, attempt) {
                 }
 
                 var privateUserData = data.rooms[i].private_user_data || [];
-                for (j = 0; j < privateUserData.length; j++) {
-                    var event = _PojoToMatrixEventMapper(client)(privateUserData[j]);
+                var privateUserDataEvents =
+                    utils.map(privateUserData, _PojoToMatrixEventMapper(client));
+                for (j = 0; j < privateUserDataEvents.length; j++) {
+                    var event = privateUserDataEvents[j];
                     if (event.getType() === "m.tag") {
                         room.addTags(event);
                     }
diff --git a/lib/models/room.js b/lib/models/room.js
index 2fe28af..a1cf296 100644
--- a/lib/models/room.js
+++ b/lib/models/room.js
@@ -473,7 +473,7 @@ Room.prototype.addTags = function(event) {
 
     // XXX: we could do a deep-comparison to see if the tags have really
     // changed - but do we want to bother?
-    this.emit("Room.tags", this);
+    this.emit("Room.tags", event, this);
 };
 
 function setEventMetadata(event, stateContext, toStartOfTimeline) {
@@ -618,10 +618,11 @@ module.exports = Room;
 /**
  * Fires whenever a room's tags are updated.
  * @event module:client~MatrixClient#"Room.tags"
+ * @param {event} event The tags event
  * @param {Room} room The room whose Room.tags was updated.
  * @example
- * matrixClient.on("Room.tags", function(room){
- *   var newTags = room.tags;
+ * matrixClient.on("Room.tags", function(event, room){
+ *   var newTags = event.getContent().tags;
  *   if (newTags["favourite"]) showStar(room);
  * });
  */
diff --git a/spec/unit/room.spec.js b/spec/unit/room.spec.js
index b92d894..9878967 100644
--- a/spec/unit/room.spec.js
+++ b/spec/unit/room.spec.js
@@ -801,4 +801,39 @@ describe("Room", function() {
 
     });
 
+    describe("tags", function() {
+
+        function mkTags(roomId, tags) {
+            var content = { "tags" : tags };
+            return new MatrixEvent({
+                content: content,
+                room_id: roomId,
+                type: "m.tag"
+            });
+        }
+
+        describe("addTag", function() {
+
+            it("should set tags on rooms from event stream so they can be obtained by the tags property",
+            function() {
+                var tags = { "m.foo": { "order": 0.5 } };
+                room.addTags(mkTags(roomId, tags));
+                expect(room.tags).toEqual(tags);
+            });
+
+            it("should emit Room.tags event when new tags are received on the event stream",
+            function() {
+                var listener = jasmine.createSpy('spy');
+                room.on("Room.tags", listener);
+
+                var tags = { "m.foo": { "order": 0.5 } };
+                var event = mkTags(roomId, tags);
+                room.addTags(event);
+                expect(listener).toHaveBeenCalledWith(event, room);
+            });
+
+            // XXX: shouldn't we try injecting actual m.tag events onto the eventstream
+            // rather than injecting via room.addTags()?
+        });
+    });
 });
