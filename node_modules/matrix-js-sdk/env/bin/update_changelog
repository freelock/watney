#!/home/rav/work/matrix-js-sdk/env/bin/python
#
# A script to update a changelog based on the github pull requests which have
# been merged since the last release.
#
# The github API is rate-limited; if this script fails due to hitting the
# rate-limit, then you can use an authentication token to avoid the rate limit.
# First generate a token at https://github.com/settings/tokens/new (there is no
# need to enable any of the 'scope' checkboxes). Then set the
# CHANGELOG_GITHUB_TOKEN environment variable to the 40 digit token.
#
# If the first line in the changelog contains the word 'unreleased', that
# section of changelog is merged into the generate result.
#

import argparse
import codecs
import datetime
import json
import logging
import operator
import os
import re
import subprocess
import textwrap

import github

logger = logging.getLogger()

def package_json():
    """ Return the contents of package.json as a python dict """
    with open('package.json', 'r') as p:
        return json.load(p)

def runcmd(args, **kwargs):
    """ Run the given command, and return its output as an iterable of lines """
    logger.debug('Running %s', ' '.join("'"+a+"'" for a in args))
    p = subprocess.Popen(args, stdin=None, stderr=None, stdout=subprocess.PIPE,
                         **kwargs)

    for line in p.stdout:
        yield line

    p.wait()
    if p.returncode != 0:
        raise Exception('Command %s exited non-zero (%i)'
                        % (args[0], p.returncode))


def github_repo(repo):
    token = os.getenv("CHANGELOG_GITHUB_TOKEN")
    g = github.Github(token)
    return g.get_repo(repo)


def get_repo_from_git():
    r = list(runcmd(['git', 'ls-remote', '--get-url', 'origin']))
    if len(r) < 1:
        return None

    url = r[0].strip()
    if url.endswith('.git'):
        url = url[:-4]

    idx = url.index("github.com")
    if idx < 0:
        return None

    return url[idx+11:]

def get_merged_prs(repo_object, since):
    # first get a list of sha's that have been added since the given tag.
    logger.info('Getting list of new commits')
    new_shas = set(r.strip() for r in 
                   runcmd(['git', 'rev-list', '^'+since, 'HEAD']))

    # then get the PRs, and see whose head sha's are in the set.
    logger.info('Getting PR list')
    pulls = repo_object.get_pulls(state='closed')

    merged_pulls = (p for p in pulls 
                    if p.head.sha in new_shas and p.merged_at)


    return sorted(merged_pulls, key=operator.attrgetter('merged_at'),
                  reverse=True)


def generate_changelog(repo_object, old_tag, new_version, filename, pulls):
    logger.info('Updating changelog %s', filename)

    output = []

    # start the output with a header
    version_url = repo_object.html_url+'/releases/tag/v' + new_version
    compare_url = repo_object.html_url+'/compare/%s...v%s' % (old_tag, 
                                                              new_version)
    keys = {
        'version': new_version,
        'version_url': version_url,
        'compare_url': compare_url,
        'date': datetime.datetime.utcnow().date().isoformat(),
    }

    header_line = ('Changes in [{version}]({version_url}) ({date})'
                   .format(**keys))
    output.extend(a+"\n" for a in (
        header_line, 
        '=' * len(header_line), 
        '[Full Changelog]({compare_url})'.format(**keys),
        '',
    ))
    
    existing_log = codecs.open(filename, 'r', encoding='utf-8').readlines()
    lineno = 0

    # see if we have an 'unreleased' section, and copy it over if so
    if 'unreleased' in existing_log[lineno].lower():
        # we do. skip the header lines, and then copy it to the output
        lineno += 1
        if re.match('^=+$', existing_log[lineno]):
            lineno += 1
        if re.match('^\s*$', existing_log[lineno]):
            lineno += 1

        while lineno < len(existing_log):
            line = existing_log[lineno] 
            if line.lower().startswith('changes '):
                break
            output.append(line)
            lineno += 1

    # write a line for each PR
    wrapper = textwrap.TextWrapper(
        initial_indent=' * ', subsequent_indent='   ',
        replace_whitespace=False,
        width=79)

    for pr in pulls:
        desc = u"{0.title}\n".format(pr)
        output.append(wrapper.fill(pr.title)+"\n")
        output.append("   [\#%s](%s)\n" % (pr.number, pr.html_url))

    output.append("\n")

    print "New changelog section follows:"
    print

    for l in output:
        print l,

    print "------------------------------"

    # now copy the rest of the existing changelog
    while lineno < len(existing_log):
        line = existing_log[lineno] 
        output.append(line)
        lineno += 1

    with codecs.open(filename, 'w', encoding='utf-8') as outfile:
        for l in output:
            outfile.write(l)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Update the changelog for the next release')

    parser.add_argument(
        '--debug', '-d', action='store_true',
        help='Enable debugging')

    parser.add_argument(
        '--file', '-f', default='CHANGELOG.md',
        help='Name of changelog file')

    parser.add_argument(
        '--old-version', '-o', default=None,
        help=('Previous version. Will be derived from package.json if '
              'omitted.'))

    parser.add_argument(
        '--repo', '-r', default=None,
        help=('Github repository name. Will be derived from git origin if '
              'omitted.'))

    parser.add_argument(
        'new_version',
        help='Version of the new release')

    args = parser.parse_args()

    log_level = logging.INFO
    if args.debug:
        github.enable_console_debug_logging()
        log_level = logging.DEBUG

    logging.basicConfig(level=log_level)

    old_version = args.old_version
    if not old_version:
        old_version=package_json()['version']
    old_tag = 'v'+old_version
    logger.info("Comparing to old tag %s", old_tag)

    repo = args.repo
    if not repo:
        repo = get_repo_from_git()
    if not repo:
        raise Exception("--repo not given, and unable to get it from git "
                        "origin")
    logger.info("Using github repo %s", repo)

    repo_object = github_repo(repo)

    # pulls = []
    pulls = get_merged_prs(repo_object=repo_object, since=old_tag)

    generate_changelog(repo_object=repo_object, old_tag=old_tag,
                       new_version=args.new_version,
                       filename=args.file, pulls=pulls)
