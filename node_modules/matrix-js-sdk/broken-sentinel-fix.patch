diff --git a/lib/models/event-timeline.js b/lib/models/event-timeline.js
index cb2cc60..771029b 100644
--- a/lib/models/event-timeline.js
+++ b/lib/models/event-timeline.js
@@ -263,9 +263,10 @@ function setEventMetadata(event, stateContext, toStartOfTimeline) {
         event.getSender()
     );
     if (event.getType() === "m.room.member") {
-        event.target = stateContext.getSentinelMember(
+        event.target = stateContext.getMember(
             event.getStateKey()
         );
+        if (!event.target) console.error(JSON.stringify(stateContext));
     }
     if (event.isState()) {
         // room state has no concept of 'old' or 'current', but we want the
diff --git a/lib/models/room-member.js b/lib/models/room-member.js
index deef9ae..33c58e6 100644
--- a/lib/models/room-member.js
+++ b/lib/models/room-member.js
@@ -61,10 +61,12 @@ utils.inherits(RoomMember, EventEmitter);
  * @param {MatrixEvent} event The <code>m.room.member</code> event
  * @param {RoomState} roomState Optional. The room state to take into account
  * when calculating (e.g. for disambiguating users with the same name).
+ * @param {Boolean} isSentinel Optional. Specifies whether this member is 
+ * acting as a sentinel or not for the purposes of calculating its displayname.
  * @fires module:client~MatrixClient#event:"RoomMember.name"
  * @fires module:client~MatrixClient#event:"RoomMember.membership"
  */
-RoomMember.prototype.setMembershipEvent = function(event, roomState) {
+RoomMember.prototype.setMembershipEvent = function(event, roomState, isSentinel) {
     if (event.getType() !== "m.room.member") {
         return;
     }
@@ -74,7 +76,7 @@ RoomMember.prototype.setMembershipEvent = function(event, roomState) {
     this.membership = event.getDirectionalContent().membership;
 
     var oldName = this.name;
-    this.name = calculateDisplayName(this, event, roomState);
+    this.name = calculateDisplayName(this, event, roomState, isSentinel);
     if (oldMembership !== this.membership) {
         this._updateModifiedTime();
         this.emit("RoomMember.membership", event, this);
@@ -202,10 +204,10 @@ RoomMember.prototype.getAvatarUrl =
     return null;
 };
 
-function calculateDisplayName(member, event, roomState) {
-    var displayName = event.getType() === "m.room.membership" ?
-        event.getContent().displayname :
-        event.getDirectionalContent().displayname;
+function calculateDisplayName(member, event, roomState, isSentinel) {
+    var displayName = isSentinel ?
+        event.getDirectionalContent().displayname :
+        event.getContent().displayname;
 
     var selfUserId = member.userId;
 
diff --git a/lib/models/room-state.js b/lib/models/room-state.js
index 35a5af4..37cc57f 100644
--- a/lib/models/room-state.js
+++ b/lib/models/room-state.js
@@ -171,8 +171,17 @@ RoomState.prototype.setStateEvents = function(stateEvents) {
             // (e.g. and manage to break it because deep copying doesn't do
             // everything).
             var sentinel = new RoomMember(event.getRoomId(), userId);
-            utils.forEach([member, sentinel], function(roomMember) {
-                roomMember.setMembershipEvent(event, self);
+            utils.forEach([member, sentinel], function(roomMember, i) {
+
+                // sentinel Senders need to track directionalContent so that
+                // when iterating over the timeline non-member events get the right
+                // sender.  however, the member event itself needs to track the
+                // actual content() rather than directionalContent() otherwise
+                // we get off-by-ones like
+                // https://github.com/vector-im/vector-web/issues/1140
+                // hence the 'i == 1' param passed in here.
+
+                roomMember.setMembershipEvent(event, self, i == 1);
                 // this member may have a power level already, so set it.
                 var pwrLvlEvent = self.getStateEvents("m.room.power_levels", "");
                 if (pwrLvlEvent) {
diff --git a/lib/models/room.js b/lib/models/room.js
index fb0790b..6469874 100644
--- a/lib/models/room.js
+++ b/lib/models/room.js
@@ -1136,7 +1136,7 @@ function setEventMetadata(event, stateContext, toStartOfTimeline) {
         event.getSender()
     );
     if (event.getType() === "m.room.member") {
-        event.target = stateContext.getSentinelMember(
+        event.target = stateContext.getMember(
             event.getStateKey()
         );
     }
diff --git a/lib/sync.js b/lib/sync.js
index 86e42eb..ed22491 100644
--- a/lib/sync.js
+++ b/lib/sync.js
@@ -917,7 +917,7 @@ SyncApi.prototype._resolveInvites = function(room) {
             inviteEvent.getContent().avatar_url = info.avatar_url;
             inviteEvent.getContent().displayname = info.displayname;
             // fire listeners
-            member.setMembershipEvent(inviteEvent, room.currentState);
+            member.setMembershipEvent(inviteEvent, room.currentState, false);
         }, function(err) {
             // OH WELL.
         });
diff --git a/spec/unit/room-state.spec.js b/spec/unit/room-state.spec.js
index 6146b96..38369bf 100644
--- a/spec/unit/room-state.spec.js
+++ b/spec/unit/room-state.spec.js
@@ -254,7 +254,7 @@ describe("RoomState", function() {
 
             expect(state.members[userA].setMembershipEvent).not.toHaveBeenCalled();
             expect(state.members[userB].setMembershipEvent).toHaveBeenCalledWith(
-                memberEvent, state
+                memberEvent, state, false
             );
         });
     });
